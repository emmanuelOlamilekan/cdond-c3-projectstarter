version: 2.1

orbs:
  slack: circleci/slack@4.12.1
  node: circleci/node@5.1.0

commands:
  destroy-environment:
    parameters:
       workflow_id:
          type: string  
    steps:
      - run:
         name: "Destroy infrastructure"
         when: on_fail
         command: |
          aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/dist --recursive
          aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
          aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
         
  revert-migrations:
     description: Revert the last migration
     parameters:
       workflow_id:
          type: string   
     steps:
       - run:
          name: Revert migrations
          command: |
              SUCCESS=$(curl --insecure  https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_<< parameters.workflow_id >>)
              if (( $SUCCESS == 1 ));
              then
                cd ~/project/backend
                npm install
                npm run migration:revert
              fi  

jobs:
   build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build   
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
   
   build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build       
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
   
   test-frontend:
    docker:
      - image: circleci/node:13.8.0  
    steps:
       - checkout 
       - restore_cache:
          keys: [backend-build]
       - run : 
          name: Run Frontend Test
          command: |
                cd frontend
                npm install
                npm run test
       - slack/notify:
          event: fail
          template: basic_fail_1
  
   test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
       - checkout
       - restore_cache :
          keys: [backend-build]
       - run : 
          name : Run  Backend test
          command: |
                  cd backend
                  npm install
                  npm run test
       - slack/notify:
          event: fail
          template: basic_fail_1           

   scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run :
          name: Front end Vulnerability scan checkout
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical  --force
              npm audit --audit-level=critical           
  
   scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Backend Vulnerabilty scan
          command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical  --force
              npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1        

   deploy-infrastructure:
    docker :
     - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
             --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
             aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
             cat .circleci/ansible/inventory.txt  
     # - destroy-environment :
     #      workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

   configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["bf:7f:6d:7d:42:99:af:92:f2:80:a8:ae:db:68:ba:40"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
              apk add --update ansible   
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt configure-server.yml
   
   run-migrations:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            ls
            npm install
            # Run and save the migration output
            # npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt 
             then
                 curl https://kvdb.io/97QsLbgGJHNFFfzHTJ3cD/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
             fi  

   build-frontend-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run :
          name: Install dependencies
          command: |
            # apt install gzip
            #  sudo install tar gzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build   
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build   
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive     
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
   
   deploy-frontend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            # apt install gzip
            #  sudo install tar gzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build   
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$( \
               aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env    
      - destroy-environment:
           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations :
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

   deploy-backend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["bf:7f:6d:7d:42:99:af:92:f2:80:a8:ae:db:68:ba:40"] 
      - attach_workspace:
          at: ~/    
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install python -y
            sudo apt-get update
            sudo apt-get install ansible -y

            # yum install -y tar gzip
            # curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
            # yum -y install nodejs
      - run :
         name: Install AWS Cli
         command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install      
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            echo "AFTER BUILD"
            ls
            cd ..
            echo "AFTER MOVING BACK"
            ls
            # Zip the directory
            tar -czf artifact.tar.gz backend   
            cd .circleci/ansible
           # ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml
            # your code here

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


   smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
            yum -y install nodejs 
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$( \
               aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text
            )
            export API_URL="http://${BACKEND_IP}:3030"
           
      - run:
          name: Backend smoke test.
          command: |
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}      
      # Here's where you will add some code to rollback on failure  
   
   cloudfront-update:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      # Here's where you will add some code to rollback on failure  

workflows:
  default:
    jobs: 
     - deploy-backend