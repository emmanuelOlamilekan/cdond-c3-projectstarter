version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  destroy-environment:
    steps:
      - run:
         name: "Destroy infrastructure"
         when: on_fail
         command: |
          aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
          aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
        
jobs:
   build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build   
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
   
   build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build       
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
   
   test-frontend:
    docker:
      - image: circleci/node:13.8.0  
    steps:
       - checkout 
       - restore_cache:
          keys: [backend-build]
       - run : 
          name: Run Frontend Test
          command: |
                cd frontend
                npm install
                npm run test
       - slack/notify:
          event: fail
          template: basic_fail_1
  
   test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
       - checkout
       - restore_cache :
          keys: [backend-build]
       - run : 
          name : Run  Backend test
          command: |
                  cd backend
                  npm install
                  npm run test
       - slack/notify:
          event: fail
          template: basic_fail_1           

   scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run :
          name: Front end Vulnerability scan checkout
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical  --force
              npm audit --audit-level=critical
             
   scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Backend Vulnerabilty scan
          command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical  --force
              npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1        

   deploy-infrastructure:
    docker :
     - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
             --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
             aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
             cat .circleci/ansible/inventory.txt  
      - destroy-environment  
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

   configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["bf:7f:6d:7d:42:99:af:92:f2:80:a8:ae:db:68:ba:40"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
              apk add --update ansible   
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt configure-server.yml
   
   run-migrations:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt 
             then
                 curl https://kvdb.io/97QsLbgGJHNFFfzHTJ3cD/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
             fi    

   deploy-frontend:
    docker:
     - image: amazon/aws-cli
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            sudo yum search tar
            sudo yum update
            sudo yum install tar
            yum install -y tar gzip
            curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
            yum -y install nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress --output text')
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
           
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      

                  
workflows:
  default:
    jobs: 
      
      - run-migrations 
          
      - deploy-frontend 
           
           